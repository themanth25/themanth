#include<stdlib.h>
#include<string.h>
#include<unistd.h>
#include<stdio.h>
int main()
{
int count,j,k,REMAIN[50],ARRIVAL[40],BURST[40],TIME=500000;
static int COMPLETE[50];
char p[40][30];
int T1=3,T2=6,W[40],TA[40],TT,AW,ATA;  
int i,max=1,number;
float TW=0,TTA=0;
printf("Arrival time should be in the ascending order\n");
printf("ENTER NUMBER OF PROCESSES-");
scanf("%d",&count);
for (i = 0; i < count; ++i)     //initialize the burst time and arrival time
{
fflush(stdin);                  //To clear the output buffer
printf("\nEnter ARRIVAL TIME  of process P%d:=",i+1);	
scanf("%d",&ARRIVAL[i]);
fflush(stdin);
printf("\nEnter BURST TIME of process P%d:=",i+1);	
scanf("%d",&BURST[i]);
}
for (i=0;i<count;++i)
{
	if (ARRIVAL[i]<TIME)
	{
		TIME=ARRIVAL[i];
	}
}
for(k=0;k<3;++k)
{
    	if (k==0)
		for (i=0;i<count;++i)
		{
			if (TIME<ARRIVAL[i] && REMAIN[i]!=0)
			{
				TIME=ARRIVAL[i];
			}
			if (BURST[i]>T1)
			{
				REMAIN[i]=BURST[i]-T1;
				TIME=TIME+T1;
			}
			else if (BURST[i]<=T1 )
			{
			TIME=TIME+BURST[i];
             REMAIN[i]=0;
             COMPLETE[i]=TIME;
		}
			}
		if (k==1)
		{
		for (i=0;i<count;++i)
		{
			if (REMAIN[i]>T2 && REMAIN[i]!=0)
			{
				REMAIN[i]=REMAIN[i]-T2;
				TIME=TIME+T2;
				COMPLETE[i]=TIME;
			}
			else if (REMAIN[i]<=T2 && REMAIN[i]!=0)
			{
			TIME=TIME+REMAIN[i];
            REMAIN[i]=0;
            COMPLETE[i]=TIME;
			}
		}
	}
		if (k==2 )
		{
		for (i = 0; i < count; ++i)
		{
         if (REMAIN[i]!=0)
         {
         	max=REMAIN[i];
         	if (max<REMAIN[i])
         	{
         		max=REMAIN[i];
       	}
         }
		}
		for (i = 0; i < count; ++i)
		{
		if (REMAIN[i]==max && REMAIN[i]!=0)
		{
			TIME=TIME+REMAIN[i];
			REMAIN[i]=0;
			COMPLETE[i]=TIME;
		}
		}
}
}
   for (i = 0; i < count; ++i)
		{
		 if (REMAIN[i]==0)
		{
			TA[i]=COMPLETE[i]-ARRIVAL[i];      
			W[i]=TA[i]-BURST[i];                
			if (W[i]<=0)
			{
				W[i]=0;
			}
		}
		}
     printf("\nREMAIN TIME of p4 %d\n",REMAIN[3] );
	printf("///////////RESULT TABLE//////////\n");
	printf("Name  BURST  ARRIVAL  COMPLETE  TA   W\n");
		for (i = 0; i < count; ++i)
		{
		 if (REMAIN[i]==0)
		{

			printf("P[%d]  | %d   |  %d   | %d    |  %d  | %d\n",i+1, BURST[i],ARRIVAL[i],COMPLETE[i],TA[i],W[i]);
		}
		}
		for (i = 0; i < count; ++i)
		{
		 if (REMAIN[i]==0)
		{
		     number++;
			TTA=(float)TTA+TA[i];
            TW=(float)TW+W[i];
		}
	}
		printf("\nAW=%.2f",TW/number);         
		printf("\nATA=%.2f\n",TTA/number);    
	for (i = 0; i < count; ++i)
		{
		 if (REMAIN[i]>0)
		{
		printf("\n process p[%d] is terminated\n",i+1);
		}
	}
	}
